openapi: 3.0.0
info:
  version: "1.0"
  title: GHZ Circuit Sampler
  description: |
    This service creates and samples from a GHZ circuit.
    The GHZ state is a superposition, where it is equally likely that all qubits are in state 0 oder all qubits are in state 1.
    Besides the number of circuit repetitions (shots) the backend can be chosen.
    Providing an IBMQ token also allows for the execution on supported devices.
paths:
  /:
    get:
      tags:
        - Status API
      summary: Health checking endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    title: Status of the service
                    type: string
                    example: Service is up and running
    post:
      tags:
        - Service API
      summary: Specify sampling size and width of GHZ circuit
      description: |
        This method is used to specify the parameters of the GHZ circuit, such as the number of qubits, the backend used for the circuit execution, as well as the number of shots.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/input'
            example:
              n_qubits: 2
              shots: 1024
              backend: qasm_simulator
              token: abc123

      responses:
        "201":
          description: Execution of the service started
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
              example:
                id: 87cb778e-ac43-11ec-b909-0242ac120002
                status: PENDING
                createdAt: "2022-01-01 22:38:01"
          headers:
            Location:
              description: URL to query the status and the result of the execution
              schema:
                type: string
        "400":
          description: Invalid input
        "500":
          description: Internal server error

  /{id}:
    get:
      tags:
        - Service API
      summary: Check execution status
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of a certain execution
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
              example:
                id: 87cb778e-ac43-11ec-b909-0242ac120002
                status: SUCCEEDED
                createdAt: "2022-01-01 22:38:08"
        "400":
          description: Invalid input
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
  /{id}/result:
    get:
      tags:
        - Service API
      summary: Get the result of an execution
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of a certain execution
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/result'
              example:
                counts_dict:
                  00: 548
                  11: 476
                metadata:
                  num_qubits: 2
                  backend: qasm_simulator
                  eval_time: 1.04
        "400":
          description: Invalid input
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

components:
  schemas:
    job:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [UNKNOWN, PENDING, RUNNING, SUCCEEDED, FAILED]
        createdAt:
          type: string

    input:
      type: object
      properties:
        data:
          type: object
          example: {}
        params:
          type: object
          properties:
            n_qubits:
              type: integer
              example: 2
            shots:
              type: integer
              example: 1024
            backend:
              type: string
              example: qasm_simulator
            token:
              type: string
              example: abc123

    result:
      type: object
      properties:
        result:
          type: object
          properties:
            counts_dict:
              type: object
              additionalProperties:
                type: integer
        metadata:
          type: object
          properties:
            num_qubits:
              type: integer
            backend:
              type: string
            eval_time:
              type: number
